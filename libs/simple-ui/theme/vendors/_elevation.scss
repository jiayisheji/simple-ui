@import '../abstracts/variables';

// mixin 和CSS类的集合，设置元素box-shadow
// See: https://simerial.io/design/environment/elevation.html
// Examples:
//  添加投影
// .sim-foo {
//   @include $sim-elevation(2);
//
//   &:active {
//     @include $sim-elevation(8);
//   }
// }
// 添加投影class
// <div id="external-card" class="sim-elevation-z2"><p>Some content</p></div>
//

// 颜色的本影，半影，和周围的阴影。
// 设计文档中描述,每个标高创建使用一组3阴影值,
// 一个阴影(表示空间的阴影完全被一个对象相对于其光源),
// 一个用于半影(空间部分被一个对象),和一个环境(包含对象本身的空间)。
// 有关这些术语及其含义的进一步解释，请参见https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra。

// 映射不同阴影集及其在每个z空间中的值。这些值是通过使用谷歌的设计人员创建的一些参考阴影集并在它们之间插入所有值来创建的。

@function _sim-get-umbra-map($color, $opacity) {
  $shadow-color: if(type-of($color) == color, rgba($color, $opacity * 0.2), $color);

  @return (
    0: '0px 0px 0px 0px #{$shadow-color}',
    1: '0px 2px 1px -1px #{$shadow-color}',
    2: '0px 3px 1px -2px #{$shadow-color}',
    3: '0px 3px 3px -2px #{$shadow-color}',
    4: '0px 2px 4px -1px #{$shadow-color}',
    5: '0px 3px 5px -1px #{$shadow-color}',
    6: '0px 3px 5px -1px #{$shadow-color}',
    7: '0px 4px 5px -2px #{$shadow-color}',
    8: '0px 5px 5px -3px #{$shadow-color}',
    9: '0px 5px 6px -3px #{$shadow-color}',
    10: '0px 6px 6px -3px #{$shadow-color}',
    11: '0px 6px 7px -4px #{$shadow-color}',
    12: '0px 7px 8px -4px #{$shadow-color}',
    13: '0px 7px 8px -4px #{$shadow-color}',
    14: '0px 7px 9px -4px #{$shadow-color}',
    15: '0px 8px 9px -5px #{$shadow-color}',
    16: '0px 8px 10px -5px #{$shadow-color}',
    17: '0px 8px 11px -5px #{$shadow-color}',
    18: '0px 9px 11px -5px #{$shadow-color}',
    19: '0px 9px 12px -6px #{$shadow-color}',
    20: '0px 10px 13px -6px #{$shadow-color}',
    21: '0px 10px 13px -6px #{$shadow-color}',
    22: '0px 10px 14px -6px #{$shadow-color}',
    23: '0px 11px 14px -7px #{$shadow-color}',
    24: '0px 11px 15px -7px #{$shadow-color}'
  );
}

@function _sim-get-penumbra-map($color, $opacity) {
  $shadow-color: if(type-of($color) ==color, rgba($color, $opacity * 0.14), $color);

  @return (
    0: '0px 0px 0px 0px #{$shadow-color}',
    1: '0px 1px 1px 0px #{$shadow-color}',
    2: '0px 2px 2px 0px #{$shadow-color}',
    3: '0px 3px 4px 0px #{$shadow-color}',
    4: '0px 4px 5px 0px #{$shadow-color}',
    5: '0px 5px 8px 0px #{$shadow-color}',
    6: '0px 6px 10px 0px #{$shadow-color}',
    7: '0px 7px 10px 1px #{$shadow-color}',
    8: '0px 8px 10px 1px #{$shadow-color}',
    9: '0px 9px 12px 1px #{$shadow-color}',
    10: '0px 10px 14px 1px #{$shadow-color}',
    11: '0px 11px 15px 1px #{$shadow-color}',
    12: '0px 12px 17px 2px #{$shadow-color}',
    13: '0px 13px 19px 2px #{$shadow-color}',
    14: '0px 14px 21px 2px #{$shadow-color}',
    15: '0px 15px 22px 2px #{$shadow-color}',
    16: '0px 16px 24px 2px #{$shadow-color}',
    17: '0px 17px 26px 2px #{$shadow-color}',
    18: '0px 18px 28px 2px #{$shadow-color}',
    19: '0px 19px 29px 2px #{$shadow-color}',
    20: '0px 20px 31px 3px #{$shadow-color}',
    21: '0px 21px 33px 3px #{$shadow-color}',
    22: '0px 22px 35px 3px #{$shadow-color}',
    23: '0px 23px 36px 3px #{$shadow-color}',
    24: '0px 24px 38px 3px #{$shadow-color}'
  );
}

@function _sim-get-ambient-map($color, $opacity) {
  $shadow-color: if(type-of($color) ==color, rgba($color, $opacity * 0.12), $color);

  @return (
    0: '0px 0px 0px 0px #{$shadow-color}',
    1: '0px 1px 3px 0px #{$shadow-color}',
    2: '0px 1px 5px 0px #{$shadow-color}',
    3: '0px 1px 8px 0px #{$shadow-color}',
    4: '0px 1px 10px 0px #{$shadow-color}',
    5: '0px 1px 14px 0px #{$shadow-color}',
    6: '0px 1px 18px 0px #{$shadow-color}',
    7: '0px 2px 16px 1px #{$shadow-color}',
    8: '0px 3px 14px 2px #{$shadow-color}',
    9: '0px 3px 16px 2px #{$shadow-color}',
    10: '0px 4px 18px 3px #{$shadow-color}',
    11: '0px 4px 20px 3px #{$shadow-color}',
    12: '0px 5px 22px 4px #{$shadow-color}',
    13: '0px 5px 24px 4px #{$shadow-color}',
    14: '0px 5px 26px 4px #{$shadow-color}',
    15: '0px 6px 28px 5px #{$shadow-color}',
    16: '0px 6px 30px 5px #{$shadow-color}',
    17: '0px 6px 32px 5px #{$shadow-color}',
    18: '0px 7px 34px 6px #{$shadow-color}',
    19: '0px 7px 36px 6px #{$shadow-color}',
    20: '0px 8px 38px 7px #{$shadow-color}',
    21: '0px 8px 40px 7px #{$shadow-color}',
    22: '0px 8px 42px 7px #{$shadow-color}',
    23: '0px 9px 44px 8px #{$shadow-color}',
    24: '0px 9px 46px 8px #{$shadow-color}'
  );
}

// 动画默认持续时间值
$sim-elevation-transition-duration: 280ms !default;

// 动画默认缓动值
$sim-elevation-transition-timing-function: $sim-fast-out-slow-in-timing-function;

// 阴影的默认颜色
$sim-elevation-color: black !default;

// 阴影的默认不透明度缩放值
$sim-elevation-opacity: 1 !default;

// 与阴影相关的选择器的前缀
$_sim-elevation-prefix: 'sim-elevation-z';

// 将正确的css规则应用于元素，使其具有由$zValue指定的高度。
// $zValue必须在1到24之间。
// .foo {
//   @include sim-elevation(2);
// }
@mixin sim-elevation($zValue, $color: $sim-elevation-color, $opacity: $sim-elevation-opacity) {
  @if type-of($zValue) !=number or not unitless($zValue) {
    @error '$zValue must be a unitless number';
  }

  @if $zValue<0 or $zValue>24 {
    @error '$zValue must be between 0 and 24';
  }

  @if $zValue == 0 {
    box-shadow: none;
  } @else {
    box-shadow: #{map-get(_sim-get-umbra-map($color, $opacity), $zValue)}, #{map-get(_sim-get-penumbra-map($color, $opacity), $zValue)},
      #{map-get(_sim-get-ambient-map($color, $opacity), $zValue)};
  }
}

@mixin sim-theme-elevation($zValue, $config, $opacity: $sim-elevation-opacity) {
  $foreground: map-get($config, foreground);
  $elevation-color: map-get($foreground, elevation);
  $elevation-color-or-default: if($elevation-color == null, $sim-elevation-color, $elevation-color);

  @include sim-elevation($zValue, $elevation-color-or-default, $opacity);
}

// 以允许使用者通过`sim-elevation-z*`类覆盖元素的方式向元素应用阴影。
// .foo {
//   @include sim-overridable-elevation(2);
// }
// <div class="foo sim-elevation-z4"></div>
// sim-elevation-z0 相当于取消box-shadow; 如果不需要阴影可以使用
@mixin sim-overridable-elevation($zValue, $color: $sim-elevation-color, $opacity: $sim-elevation-opacity) {
  &:not([class*='#{$_sim-elevation-prefix}']) {
    @include sim-elevation($zValue, $color, $opacity);
  }
}

@mixin sim-theme-overridable-elevation($zValue, $theme, $opacity: $sim-elevation-opacity) {
  $foreground: map-get($theme, foreground);
  $elevation-color: map-get($foreground, elevation);
  $elevation-color-or-default: if($elevation-color == null, $sim-elevation-color, $elevation-color);

  @include sim-overridable-elevation($zValue, $elevation-color-or-default, $opacity);
}

@function _sim-get-overridable-elevation-hover-value($zValue) {
  @each $value in (8, 12, 16) {
    @if $zValue <= ($value - 4) {
      @return $value;
    }
  }
  @return $zValue;
}

@mixin sim-overridable-elevation-hover($zValue, $hValue: null, $color: $sim-elevation-color, $opacity: $sim-elevation-opacity) {
  $hValue-default: if($hValue == null, _sim-get-overridable-elevation-hover-value($zValue), $hValue);
  @debug $hValue-default;
  &:not([class*='#{$_sim-elevation-prefix}']) {
    @include sim-elevation($zValue, $color, $opacity);
    @include sim-elevation-transition();
    &:hover {
      @include sim-elevation($hValue-default, $color, $opacity);
    }
  }
}

// 返回一个字符串，该字符串可以用作海拔过渡属性的值。在组件需要转换多个属性的情况下，直接调用此函数非常有用。
//
// .foo {
//   transition: sim-elevation-transition-property-value(), opacity 100ms ease;
// }
@function sim-elevation-transition-property-value(
  $duration: $sim-elevation-transition-duration,
  $easing: $sim-elevation-transition-timing-function
) {
  @return box-shadow #{$duration} #{$easing};
}

// 应用正确的css规则，以便在标高之间进行元素转换。这个mixin应该应用于那些仰角值将根据上下文而变化的元素(例如，在active 或 disabled时)。
// 这个mixin和上面的函数都使用默认参数，因此用户可以以相同的方式使用它们。
// .foo {
//   @include sim-elevation-transition;
// }
@mixin sim-elevation-transition($duration: $sim-elevation-transition-duration, $easing: $sim-elevation-transition-timing-function) {
  transition: sim-elevation-transition-property-value($duration, $easing);
}
